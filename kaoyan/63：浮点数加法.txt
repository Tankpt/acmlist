4
0.11111111111111111111111111111111
0.98888888888888888888888888888889

1.2
6.7868888888888888888888888888888

9999999999999999.1
0.91

111111111111.111111111111111111
111111111111.111111111111111111


#include <stdio.h>
#include <math.h>
#include <stdlib.h>
struct bigint{
	int dig[27];//整数
	int min[27];//小数
	int size1;
	int size2;
}a,b,c;
void init(char *s,bigint *t)
{
	int len=0,key,i,sum,j,dx;
	t->size1=t->size2=0;
	for(i=0;i<27;i++)
		t->dig[i]=t->min[i]=0;
	while(s[len]!='\0')
	{
		if(s[len]=='.') key=len;
		len++;
	}
	j=0;sum=0;dx=1;
	for(i=key-1;i>=0;i--)//整数低位向高位
	{
		sum=sum+pow(10.0,j)*(s[i]-'0');
		if(j==3)
		{
			t->dig[t->size1]=sum;t->size1++;
			sum=0;j=-1;
		}
		j++;
	}
	if(sum!=0)
	{
		t->dig[t->size1]=sum;t->size1++;
	}
	if(t->size1==0 && sum==0)//前端为0开始
		t->size1++;
	j=0;sum=0;
	for(i=key+1;i<len;i++)//小数从高位向地位
	{
		sum=sum*10+(s[i]-'0');
		if(j==3)
		{
			t->min[t->size2]=sum;t->size2++;
			sum=0;j=-1;//容易错。执行完后还有一次+1的动作
		}
		j++;
	}
	if(sum!=0)
	{
		t->min[t->size2]=sum*pow(10.0,4-j);t->size2++;
	}
}
void add()
{
	int i,j,tmp,cin;
	for(i=0;i<27;i++)
		c.dig[i]=c.min[i]=0;
	c.size1=0;
	if(a.size2>b.size2)//小数先
		i=a.size2;
	else i=b.size2;
	c.size2=i;i--;cin=0;
	while(i>=0)
	{
		tmp=a.min[i]+b.min[i]+cin;
		c.min[i]=tmp%10000;
		if(c.min[i]==0 && i==c.size2-1) c.size2--;
		cin=tmp/10000;
		i--;
	}
	i=j=0;
	while(i<a.size1 && j<b.size1)//整数加
	{
		tmp=a.dig[i]+b.dig[j]+cin;
		c.dig[c.size1]=tmp%10000;
		cin=tmp/10000;
		c.size1++;i++;j++;
	}
	if(i<a.size1 && j==b.size1)//a还有
	{
		while(i<a.size1)
		{
			tmp=a.dig[i]+cin;
			c.dig[c.size1]=tmp%10000;
			cin=tmp/10000;
			c.size1++;i++;
		}
	}
	else if(i==a.size1 && j<b.size1)
	{
		while(j<b.size1)
		{
			tmp=b.dig[j]+cin;
			c.dig[c.size1]=tmp%10000;
			cin=tmp/10000;
			c.size1++;j++;
		}
	}
	if(cin!=0)
	{
		c.dig[c.size1]=cin;c.size1++;
	}
};
int main() 
{
	int n,i,tmp,j;
	char s;
	while(scanf("%d",&n)!=EOF )
	{
		char s1[102],s2[102];
		for(i=0;i<n;i++)
		{
			scanf("%s",&s1);
			scanf("%s",&s2);
			if(i!=n-1) s=getchar();
			init(s1,&a);init(s2,&b);
			//
			add();
			printf("%d",c.dig[c.size1-1]);
			for(j=c.size1-2;j>=0;j--)
			{
				printf("%04d",c.dig[j]);
			}
			printf(".");//
			for(j=0;j<c.size2-1;j++)
				printf("%04d",c.min[j]);
			tmp=c.min[j];j=0;
			while(tmp%10==0 && tmp>=0)//除去后面的0
			{
				tmp=tmp/10;j++;
			}
			if(j==0) printf("%04d\n",tmp);
			else if(j==1) printf("%03d\n",tmp);
			else if(j==2) printf("%02d\n",tmp);
			else printf("%d\n",tmp);
		}	
	}
	return 0;

}